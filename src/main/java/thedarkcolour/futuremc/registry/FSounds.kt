package thedarkcolour.futuremc.registry

import net.minecraft.block.SoundType
import net.minecraft.util.ResourceLocation
import net.minecraft.util.SoundEvent
import net.minecraftforge.registries.IForgeRegistry
import thedarkcolour.futuremc.FutureMC

@Suppress("MemberVisibilityCanBePrivate")
object FSounds {
    val TRIDENT_THROW = sound("trident_throw")
    val TRIDENT_PIERCE = sound("trident_pierce")
    val TRIDENT_IMPACT = sound("trident_impact")
    val TRIDENT_CONDUCTIVIDAD = sound("trident_channeling")
    val TRIDENT_LOYALTY = sound("loyalty")
    val TRIDENT_RIPTIDE_I = sound("riptide_i")
    val TRIDENT_RIPTIDE_II = sound("riptide_ii")
    val TRIDENT_RIPTIDE_III = sound("riptide_iii")
    val CROSSBOW_SHOOT = sound("crossbow_shoot")
    val CROSSBOW_QUICK_CHARGE_I = sound("quick_charge_i")
    val CROSSBOW_QUICK_CHARGE_II = sound("quick_charge_ii")
    val CROSSBOW_QUICK_CHARGE_III = sound("quick_charge_iii")
    val CROSSBOW_LOADING_START = sound("crossbow_loading_start")
    val CROSSBOW_LOADING_MIDDLE = sound("crossbow_loading_middle")
    val CROSSBOW_LOADING_END = sound("crossbow_loading_end")
    val CAMPFIRE_CRACKLE = sound("campfire_crackle")
    val SWEET_BERRY_BUSH_PICK_BERRIES = sound("item.sweet_berries.pick_from_bush")
    val ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH = sound("entity.player.hurt_sweet_berry_bush")
    val GRINDSTONE_USE = sound("grindstone_use")
    val COMPOSTER_EMPTY = sound("composter_empty")
    val COMPOSTER_FILL = sound("composter_fill")
    val COMPOSTER_FILL_SUCCESS = sound("composter_fill_success")
    val COMPOSTER_READY = sound("composter_ready")
    val PANDA_PRE_SNEEZE = sound("panda_pre_sneeze")
    @JvmField val PANDA_SNEEZE = sound("panda_sneeze")
    @JvmField val PANDA_AMBIENT = sound("panda_ambient")
    @JvmField val PANDA_DEATH = sound("panda_death")
    @JvmField val PANDA_EAT = sound("panda_eat")
    @JvmField val PANDA_STEP = sound("panda_step")
    @JvmField val PANDA_CANNOT_BREED = sound("panda_cannot_breed")
    @JvmField val PANDA_AGGRESSIVE_AMBIENT = sound("panda_aggressive_ambient")
    @JvmField val PANDA_WORRIED_AMBIENT = sound("panda_worried_ambient")
    @JvmField val PANDA_HURT = sound("panda_hurt")
    @JvmField val PANDA_BITE = sound("panda_bite")
    val BAMBOO_STEP = sound("bamboo_step")
    val BAMBOO_SAPLING_PLACE = sound("bamboo_sapling_place")
    val BAMBOO_SAPLING_HIT = sound("bamboo_sapling_hit")
    val BAMBOO_PLACE = sound("bamboo_place")
    val SCAFFOLD_BREAK = sound("scaffold_break")
    val SCAFFOLD_STEP = sound("scaffold_step")
    val SCAFFOLD_PLACE = sound("scaffold_place")
    val SCAFFOLD_HIT = sound("scaffold_hit")
    val SCAFFOLD_FALL = sound("scaffold_fall")
    val HONEY_BLOCK_BREAK = sound("honey_block_break")
    val HONEY_BLOCK_STEP = sound("honey_block_step")
    val HONEY_BLOCK_SLIDE = sound("honey_block_slide")
    val STONECUTTER_CARVE = sound("stonecutter_carve")
    val CORAL_DIG = sound("coral_dig")
    val CORAL_STEP = sound("coral_step")
    val BELL_RING = sound("bell_ring")
    val BEE_ENTER_HIVE = sound("bee_enter_hive")
    val ENTITY_BEE_EXIT_HIVE = sound("bee_exit_hive")
    @JvmField val BEE_STING = sound("bee_sting")
    @JvmField val BEE_DEATH = sound("bee_death")
    @JvmField val BEE_HURT = sound("bee_hurt")
    @JvmField val BEE_POLLINATE = sound("bee_pollinate")
    @JvmField val BEE_WORK = sound("bee_work")
    @JvmField val BEE_AGGRESSIVE = sound("bee_aggressive")
    @JvmField val BEE_PASSIVE = sound("bee_passive")
    val HONEY_BOTTLE_DRINK = sound("honey_bottle_drink")
    val BEEHIVE_SHEAR = sound("shear_hive")
    val LANTERN_BREAK = sound("lantern_place")
    val LANTERN_PLACE = sound("lantern_break")
    val BUCKET_FILL_FISH = sound("bucket_fill_fish")
    val BUCKET_EMPTY_FISH = sound("bucket_empty_fish")
    val COD_SWIM = sound("cod_swim")
    val COD_FLOP = sound("cod_flop")
    val COD_HURT = sound("cod_hurt")
    val COD_DEATH = sound("cod_death")
    val PUFFERFISH_SWIM = sound("pufferfish_swim")
    val PUFFERFISH_FLOP = sound("pufferfish_flop")
    val PUFFERFISH_HURT = sound("pufferfish_hurt")
    val PUFFERFISH_DEATH = sound("pufferfish_death")
    val PUFFERFISH_INFLATE = sound("pufferfish_inflate")
    val PUFFERFISH_DEFLATE = sound("pufferfish_deflate")
    val PUFFERFISH_STING = sound("pufferfish_sting")
    val SALMON_SWIM = sound("salmon_swim")
    val SALMON_FLOP = sound("salmon_flop")
    val SALMON_HURT = sound("salmon_hurt")
    val SALMON_DEATH = sound("salmon_death")
    val TROPICAL_FISH_SWIM = sound("tropical_fish_swim")
    val TROPICAL_FISH_FLOP = sound("tropical_fish_flop")
    val TROPICAL_FISH_HURT = sound("tropical_fish_hurt")
    val TROPICAL_FISH_DEATH = sound("tropical_fish_death")
    val DROWNED_AMBIENT = sound("drowned_ambient")
    val DROWNED_HURT = sound("drowned_hurt")
    val DROWNED_DEATH = sound("drowned_death")
    val DROWNED_STEP = sound("drowned_step")
    val DROWNED_SWIM = sound("drowned_swim")
    val IRON_GOLEM_REPAIR = sound("iron_golem_repair")
    val BLOCK_NETHERITE_BREAK = sound("netherite_block_break")
    val BLOCK_NETHERITE_STEP = sound("netherite_block_step")
    val BLOCK_NETHERITE_PLACE = sound("netherite_block_place")
    val BLOCK_NETHERITE_HIT = sound("netherite_block_hit")
    val BLOCK_NETHERITE_FALL = sound("netherite_block_fall")
    val BLOCK_ANCIENT_DEBRIS_BREAK = sound("ancient_debris_break")
    val BLOCK_ANCIENT_DEBRIS_STEP = sound("ancient_debris_step")
    val BLOCK_ANCIENT_DEBRIS_PLACE = sound("ancient_debris_place")
    val BLOCK_ANCIENT_DEBRIS_HIT = sound("ancient_debris_hit")
    val BLOCK_ANCIENT_DEBRIS_FALL = sound("ancient_debris_fall")
    val BLOCK_SOUL_SOIL_BREAK = sound("soul_soil_break")
    val BLOCK_SOUL_SOIL_STEP = sound("soul_soil_step")
    val BLOCK_SOUL_SOIL_PLACE = sound("soul_soil_place")
    val BLOCK_SOUL_SOIL_HIT = sound("soul_soil_hit")
    val BLOCK_SOUL_SOIL_FALL = sound("soul_soil_fall")
    val BLOCK_NYLIUM_BREAK = sound("nylium_break")
    val BLOCK_NYLIUM_STEP = sound("nylium_step")
    val BLOCK_NYLIUM_PLACE = sound("nylium_place")
    val BLOCK_NYLIUM_HIT = sound("nylium_hit")
    val BLOCK_NYLIUM_FALL = sound("nylium_fall")
    val BLOCK_NETHER_STEM_BREAK = sound("nether_stem_break")
    val BLOCK_NETHER_STEM_STEP = sound("nether_stem_step")
    val BLOCK_NETHER_STEM_PLACE = sound("nether_stem_place")
    val BLOCK_NETHER_STEM_HIT = sound("nether_stem_hit")
    val BLOCK_NETHER_STEM_FALL = sound("nether_stem_fall")
    val BLOCK_NETHER_SPROUTS_BREAK = sound("nether_sprouts_break")
    val BLOCK_NETHER_SPROUTS_STEP = sound("nether_sprouts_step")
    val BLOCK_NETHER_SPROUTS_PLACE = sound("nether_sprouts_place")
    val BLOCK_NETHER_SPROUTS_HIT = sound("nether_sprouts_hit")
    val BLOCK_NETHER_SPROUTS_FALL = sound("nether_sprouts_fall")
    val BLOCK_FUNGUS_BREAK = sound("fungus_break")
    val BLOCK_FUNGUS_STEP = sound("fungus_step")
    val BLOCK_FUNGUS_PLACE = sound("fungus_place")
    val BLOCK_FUNGUS_HIT = sound("fungus_hit")
    val BLOCK_FUNGUS_FALL = sound("fungus_fall")
    val BLOCK_BASALT_BREAK = sound("basalt_break")
    val BLOCK_BASALT_STEP = sound("basalt_step")
    val BLOCK_BASALT_PLACE = sound("basalt_place")
    val BLOCK_BASALT_HIT = sound("basalt_hit")
    val BLOCK_BASALT_FALL = sound("basalt_fall")
    val BLOCK_WEEPING_VINES_BREAK = sound("weeping_vines_break")
    val BLOCK_WEEPING_VINES_STEP = sound("weeping_vines_step")
    val BLOCK_WEEPING_VINES_PLACE = sound("weeping_vines_place")
    val BLOCK_WEEPING_VINES_HIT = sound("weeping_vines_hit")
    val BLOCK_WEEPING_VINES_FALL = sound("weeping_vines_fall")
    val BLOCK_SHROOMLIGHT_BREAK = sound("shroomlight_break")
    val BLOCK_SHROOMLIGHT_STEP = sound("shroomlight_step")
    val BLOCK_SHROOMLIGHT_PLACE = sound("shroomlight_place")
    val BLOCK_SHROOMLIGHT_HIT = sound("shroomlight_hit")
    val BLOCK_SHROOMLIGHT_FALL = sound("shroomlight_fall")
    val BLOCK_ROOTS_BREAK = sound("roots_break")
    val BLOCK_ROOTS_STEP = sound("roots_step")
    val BLOCK_ROOTS_PLACE = sound("roots_place")
    val BLOCK_ROOTS_HIT = sound("roots_hit")
    val BLOCK_ROOTS_FALL = sound("roots_fall")
    val BLOCK_NETHER_ORE_BREAK = sound("nether_ore_break")
    val BLOCK_NETHER_ORE_STEP = sound("nether_ore_step")
    val BLOCK_NETHER_ORE_PLACE = sound("nether_ore_place")
    val BLOCK_NETHER_ORE_HIT = sound("nether_ore_hit")
    val BLOCK_NETHER_ORE_FALL = sound("nether_ore_fall")
    val BLOCK_CHAIN_BREAK = sound("chain_break")
    val BLOCK_CHAIN_STEP = sound("chain_step")
    val BLOCK_CHAIN_PLACE = sound("chain_place")
    val BLOCK_CHAIN_HIT = sound("chain_hit")
    val BLOCK_CHAIN_FALL = sound("chain_fall")
    val BLOCK_LODESTONE_BREAK = sound("lodestone_break")
    val BLOCK_LODESTONE_STEP = sound("lodestone_step")
    val BLOCK_LODESTONE_PLACE = sound("lodestone_place")
    val BLOCK_LODESTONE_HIT = sound("lodestone_hit")
    val BLOCK_LODESTONE_FALL = sound("lodestone_fall")
    val BLOCK_NETHER_GOLD_ORE_BREAK = sound("nether_gold_ore_break")
    val BLOCK_NETHER_GOLD_ORE_STEP = sound("nether_gold_ore_step")
    val BLOCK_NETHER_GOLD_ORE_PLACE = sound("nether_gold_ore_place")
    val BLOCK_NETHER_GOLD_ORE_HIT = sound("nether_gold_ore_hit")
    val BLOCK_NETHER_GOLD_ORE_FALL = sound("nether_gold_ore_fall")
    val BLOCK_GILDED_BLACKSTONE_BREAK = sound("gilded_blackstone_break")
    val BLOCK_GILDED_BLACKSTONE_STEP = sound("gilded_blackstone_step")
    val BLOCK_GILDED_BLACKSTONE_PLACE = sound("gilded_blackstone_place")
    val BLOCK_GILDED_BLACKSTONE_HIT = sound("gilded_blackstone_hit")
    val BLOCK_GILDED_BLACKSTONE_FALL = sound("gilded_blackstone_fall")
    val BLOCK_SMITHING_TABLE_USE = sound("smithing_table_use")
    @JvmField val BLOCK_BARREL_OPEN = sound("barrel_open")
    @JvmField val BLOCK_BARREL_CLOSE = sound("barrel_close")
    val ITEM_ARMOR_EQUIP_TURTLE = sound("equip_turtle")
    val ITEM_ARMOR_EQUIP_NETHERITE = sound("equip_netherite")
    val RECORD_PIGSTEP = sound("pigstep")
    val RECORD_OTHERSIDE = sound("otherside")

    val BAMBOO = SoundType(1.0f, 1.0f, BAMBOO_PLACE, BAMBOO_STEP, BAMBOO_PLACE, BAMBOO_PLACE, BAMBOO_STEP)
    val BAMBOO_SAPLING = SoundType(1.0f, 1.0f, BAMBOO_SAPLING_HIT, BAMBOO_SAPLING_PLACE, BAMBOO_SAPLING_PLACE, BAMBOO_SAPLING_HIT, BAMBOO_SAPLING_PLACE)
    val CORAL = SoundType(1.0f, 1.0f, CORAL_DIG, CORAL_STEP, CORAL_DIG, CORAL_DIG, CORAL_STEP)
    val HONEY_BLOCK = SoundType(1.0f, 1.0f, HONEY_BLOCK_BREAK, HONEY_BLOCK_STEP, HONEY_BLOCK_BREAK, HONEY_BLOCK_BREAK, HONEY_BLOCK_STEP)
    val LANTERN = SoundType(1.0f, 1.0f, LANTERN_BREAK, LANTERN_PLACE, LANTERN_PLACE, LANTERN_BREAK, LANTERN_PLACE)
    val SCAFFOLDING = SoundType(1.0f, 1.0f, SCAFFOLD_BREAK, SCAFFOLD_STEP, SCAFFOLD_PLACE, SCAFFOLD_HIT, SCAFFOLD_FALL)
    val NETHERITE = SoundType(1.0f, 1.0f, BLOCK_NETHERITE_BREAK, BLOCK_NETHERITE_STEP, BLOCK_NETHERITE_PLACE, BLOCK_NETHERITE_HIT, BLOCK_NETHERITE_FALL)
    val ANCIENT_DEBRIS = SoundType(1.0f, 1.0f, BLOCK_ANCIENT_DEBRIS_BREAK, BLOCK_ANCIENT_DEBRIS_STEP, BLOCK_ANCIENT_DEBRIS_PLACE, BLOCK_ANCIENT_DEBRIS_HIT, BLOCK_ANCIENT_DEBRIS_FALL)
    val SOUL_SOIL = SoundType(1.0f, 1.0f, BLOCK_SOUL_SOIL_BREAK, BLOCK_SOUL_SOIL_STEP, BLOCK_SOUL_SOIL_PLACE, BLOCK_SOUL_SOIL_HIT, BLOCK_SOUL_SOIL_FALL)
    val NYLIUM = SoundType(1.0f, 1.0f, BLOCK_NYLIUM_BREAK, BLOCK_NYLIUM_STEP, BLOCK_NYLIUM_PLACE, BLOCK_NYLIUM_HIT, BLOCK_NYLIUM_FALL)
    val NETHER_STEM = SoundType(1.0f, 1.0f, BLOCK_NETHER_STEM_BREAK, BLOCK_NETHER_STEM_STEP, BLOCK_NETHER_STEM_PLACE, BLOCK_NETHER_STEM_HIT, BLOCK_NETHER_STEM_FALL)
    val NETHER_SPROUTS = SoundType(1.0f, 1.0f, BLOCK_NETHER_SPROUTS_BREAK, BLOCK_NETHER_SPROUTS_STEP, BLOCK_NETHER_SPROUTS_PLACE, BLOCK_NETHER_SPROUTS_HIT, BLOCK_NETHER_SPROUTS_FALL)
    val FUNGUS = SoundType(1.0f, 1.0f, BLOCK_FUNGUS_BREAK, BLOCK_FUNGUS_STEP, BLOCK_FUNGUS_PLACE, BLOCK_FUNGUS_HIT, BLOCK_FUNGUS_FALL)
    val BASALT = SoundType(1.0f, 1.0f, BLOCK_BASALT_BREAK, BLOCK_BASALT_STEP, BLOCK_BASALT_PLACE, BLOCK_BASALT_HIT, BLOCK_BASALT_FALL)
    val WEEPING_VINES = SoundType(1.0f, 1.0f, BLOCK_WEEPING_VINES_BREAK, BLOCK_WEEPING_VINES_STEP, BLOCK_WEEPING_VINES_PLACE, BLOCK_WEEPING_VINES_HIT, BLOCK_WEEPING_VINES_FALL)
    val SHROOMLIGHT = SoundType(1.0f, 1.0f, BLOCK_SHROOMLIGHT_BREAK, BLOCK_SHROOMLIGHT_STEP, BLOCK_SHROOMLIGHT_PLACE, BLOCK_SHROOMLIGHT_HIT, BLOCK_SHROOMLIGHT_FALL)
    val ROOTS = SoundType(1.0f, 1.0f, BLOCK_ROOTS_BREAK, BLOCK_ROOTS_STEP, BLOCK_ROOTS_PLACE, BLOCK_ROOTS_HIT, BLOCK_ROOTS_FALL)
    val NETHER_GOLD_ORE = SoundType(1.0f, 1.0f, BLOCK_NETHER_GOLD_ORE_BREAK, BLOCK_NETHER_GOLD_ORE_STEP, BLOCK_NETHER_GOLD_ORE_PLACE, BLOCK_NETHER_GOLD_ORE_HIT, BLOCK_NETHER_GOLD_ORE_FALL)
    val GILDED_BLACKSTONE = SoundType(1.0f, 1.0f, BLOCK_GILDED_BLACKSTONE_BREAK, BLOCK_GILDED_BLACKSTONE_STEP, BLOCK_GILDED_BLACKSTONE_PLACE, BLOCK_GILDED_BLACKSTONE_HIT, BLOCK_GILDED_BLACKSTONE_FALL)
    val CHAIN = SoundType(1.0f, 1.0f, BLOCK_CHAIN_BREAK, BLOCK_CHAIN_STEP, BLOCK_CHAIN_PLACE, BLOCK_CHAIN_HIT, BLOCK_CHAIN_FALL)

    private fun sound(name: String): SoundEvent {
        val loc = ResourceLocation(FutureMC.ID, name)
        return SoundEvent(loc).setRegistryName(loc)
    }

    fun registerSounds(sounds: IForgeRegistry<SoundEvent>) {
        sounds.register(TRIDENT_THROW)
        sounds.register(TRIDENT_PIERCE)
        sounds.register(TRIDENT_IMPACT)
        sounds.register(TRIDENT_CONDUCTIVIDAD)
        sounds.register(TRIDENT_LOYALTY)
        sounds.register(TRIDENT_RIPTIDE_I)
        sounds.register(TRIDENT_RIPTIDE_II)
        sounds.register(TRIDENT_RIPTIDE_III)
        sounds.register(CROSSBOW_SHOOT)
        sounds.register(CROSSBOW_QUICK_CHARGE_I)
        sounds.register(CROSSBOW_QUICK_CHARGE_II)
        sounds.register(CROSSBOW_QUICK_CHARGE_III)
        sounds.register(CROSSBOW_LOADING_START)
        sounds.register(CROSSBOW_LOADING_MIDDLE)
        sounds.register(CROSSBOW_LOADING_END)
        sounds.register(CAMPFIRE_CRACKLE)
        sounds.register(SWEET_BERRY_BUSH_PICK_BERRIES)
        sounds.register(ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH)
        sounds.register(GRINDSTONE_USE)
        sounds.register(COMPOSTER_EMPTY)
        sounds.register(COMPOSTER_FILL)
        sounds.register(COMPOSTER_FILL_SUCCESS)
        sounds.register(COMPOSTER_READY)
        sounds.register(PANDA_PRE_SNEEZE)
        sounds.register(PANDA_SNEEZE)
        sounds.register(PANDA_AMBIENT)
        sounds.register(PANDA_DEATH)
        sounds.register(PANDA_EAT)
        sounds.register(PANDA_STEP)
        sounds.register(PANDA_CANNOT_BREED)
        sounds.register(PANDA_AGGRESSIVE_AMBIENT)
        sounds.register(PANDA_WORRIED_AMBIENT)
        sounds.register(PANDA_HURT)
        sounds.register(PANDA_BITE)
        sounds.register(BAMBOO_STEP)
        sounds.register(BAMBOO_PLACE)
        sounds.register(BAMBOO_SAPLING_PLACE)
        sounds.register(BAMBOO_SAPLING_HIT)
        sounds.register(SCAFFOLD_BREAK) //
        sounds.register(SCAFFOLD_STEP)  //
        sounds.register(SCAFFOLD_PLACE) //
        sounds.register(SCAFFOLD_HIT)   //
        sounds.register(SCAFFOLD_FALL)  //
        sounds.register(HONEY_BLOCK_BREAK)
        sounds.register(HONEY_BLOCK_STEP)
        sounds.register(HONEY_BLOCK_SLIDE)
        sounds.register(STONECUTTER_CARVE)
        sounds.register(CORAL_DIG)
        sounds.register(CORAL_STEP)
        sounds.register(BELL_RING)
        sounds.register(BEE_ENTER_HIVE)
        sounds.register(ENTITY_BEE_EXIT_HIVE)
        sounds.register(BEE_STING)
        sounds.register(BEE_DEATH)
        sounds.register(BEE_HURT)
        sounds.register(BEE_POLLINATE)
        sounds.register(BEE_WORK)
        sounds.register(BEE_AGGRESSIVE)
        sounds.register(BEE_PASSIVE)
        sounds.register(HONEY_BOTTLE_DRINK)
        sounds.register(BEEHIVE_SHEAR)
        sounds.register(LANTERN_PLACE)
        sounds.register(LANTERN_BREAK)
        sounds.register(BUCKET_FILL_FISH)
        sounds.register(BUCKET_EMPTY_FISH)
        sounds.register(COD_SWIM)
        sounds.register(COD_FLOP)
        sounds.register(COD_HURT)
        sounds.register(COD_DEATH)
        sounds.register(PUFFERFISH_SWIM)
        sounds.register(PUFFERFISH_FLOP)
        sounds.register(PUFFERFISH_HURT)
        sounds.register(PUFFERFISH_DEATH)
        sounds.register(PUFFERFISH_INFLATE)
        sounds.register(PUFFERFISH_DEFLATE)
        sounds.register(PUFFERFISH_STING)
        sounds.register(SALMON_SWIM)
        sounds.register(SALMON_FLOP)
        sounds.register(SALMON_HURT)
        sounds.register(SALMON_DEATH)
        sounds.register(TROPICAL_FISH_SWIM)
        sounds.register(TROPICAL_FISH_FLOP)
        sounds.register(TROPICAL_FISH_HURT)
        sounds.register(TROPICAL_FISH_DEATH)
        // sounds.register(DROWNED_AMBIENT)
        // sounds.register(DROWNED_HURT)
        // sounds.register(DROWNED_DEATH)
        // sounds.register(DROWNED_STEP)
        // sounds.register(DROWNED_SWIM)
        sounds.register(IRON_GOLEM_REPAIR)
        sounds.register(BLOCK_NETHERITE_BREAK)
        sounds.register(BLOCK_NETHERITE_STEP)
        sounds.register(BLOCK_NETHERITE_PLACE)
        sounds.register(BLOCK_NETHERITE_HIT)
        sounds.register(BLOCK_NETHERITE_FALL)
        sounds.register(BLOCK_ANCIENT_DEBRIS_BREAK)
        sounds.register(BLOCK_ANCIENT_DEBRIS_STEP)
        sounds.register(BLOCK_ANCIENT_DEBRIS_PLACE)
        sounds.register(BLOCK_ANCIENT_DEBRIS_HIT)
        sounds.register(BLOCK_ANCIENT_DEBRIS_FALL)
        sounds.register(BLOCK_SOUL_SOIL_BREAK)
        sounds.register(BLOCK_SOUL_SOIL_STEP)
        sounds.register(BLOCK_SOUL_SOIL_PLACE)
        sounds.register(BLOCK_SOUL_SOIL_HIT)
        sounds.register(BLOCK_SOUL_SOIL_FALL)
        sounds.register(BLOCK_NYLIUM_BREAK)
        sounds.register(BLOCK_NYLIUM_STEP)
        sounds.register(BLOCK_NYLIUM_PLACE)
        sounds.register(BLOCK_NYLIUM_HIT)
        sounds.register(BLOCK_NYLIUM_FALL)
        sounds.register(BLOCK_NETHER_STEM_BREAK)
        sounds.register(BLOCK_NETHER_STEM_STEP)
        sounds.register(BLOCK_NETHER_STEM_PLACE)
        sounds.register(BLOCK_NETHER_STEM_HIT)
        sounds.register(BLOCK_NETHER_STEM_FALL)
        sounds.register(BLOCK_NETHER_SPROUTS_BREAK)
        sounds.register(BLOCK_NETHER_SPROUTS_STEP)
        sounds.register(BLOCK_NETHER_SPROUTS_PLACE)
        sounds.register(BLOCK_NETHER_SPROUTS_HIT)
        sounds.register(BLOCK_NETHER_SPROUTS_FALL)
        // sounds.register(BLOCK_FUNGUS_BREAK)
        // sounds.register(BLOCK_FUNGUS_STEP)
        // sounds.register(BLOCK_FUNGUS_PLACE)
        // sounds.register(BLOCK_FUNGUS_HIT)
        // sounds.register(BLOCK_FUNGUS_FALL)
        // sounds.register(BLOCK_BASALT_BREAK)
        // sounds.register(BLOCK_BASALT_STEP)
        // sounds.register(BLOCK_BASALT_PLACE)
        // sounds.register(BLOCK_BASALT_HIT)
        // sounds.register(BLOCK_BASALT_FALL)
        // sounds.register(BLOCK_WEEPING_VINES_BREAK)
        // sounds.register(BLOCK_WEEPING_VINES_STEP)
        // sounds.register(BLOCK_WEEPING_VINES_PLACE)
        // sounds.register(BLOCK_WEEPING_VINES_HIT)
        // sounds.register(BLOCK_WEEPING_VINES_FALL)
        // sounds.register(BLOCK_SHROOMLIGHT_BREAK)
        // sounds.register(BLOCK_SHROOMLIGHT_STEP)
        // sounds.register(BLOCK_SHROOMLIGHT_PLACE)
        // sounds.register(BLOCK_SHROOMLIGHT_HIT)
        // sounds.register(BLOCK_SHROOMLIGHT_FALL)
        sounds.registerAll(BLOCK_ROOTS_BREAK, BLOCK_ROOTS_STEP, BLOCK_ROOTS_PLACE, BLOCK_ROOTS_HIT, BLOCK_ROOTS_FALL)

        sounds.register(BLOCK_SMITHING_TABLE_USE)
        sounds.registerAll(BLOCK_BARREL_OPEN, BLOCK_BARREL_CLOSE)
    }
}